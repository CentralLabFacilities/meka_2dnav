TrajectoryPlannerROS:

# Set the acc.eleration limits of the robot - "most important thing"
  acc_lim_x: 1.4                    # 2.5
  acc_lim_y: 0.6                    # 2.5
  acc_lim_theta: 1.4                # 3.2

# Set the velocity limits of the robot
  max_vel_x: 1.6                    # 0.5
  min_vel_x: 0.2                    # 0.1
  max_vel_y: 0.6                    # ??
  min_vel_y: 0.2                    # ??
  max_vel_theta: 1.4                # 1.0
  min_vel_theta: -1.4               #-1.0
  min_in_place_vel_theta: 0.6       # 0.4

# Notice that this velocity is set to be negative. A bit confusing admittedly.
  escape_vel: -0.1                  # -0.1

# Meka is holonomic
  holonomic_robot: true            # true

# ---- Goal tolerance parameters
  yaw_goal_tolerance: 0.1           # 0.25 rad = ~15 degree ... 0.05 is default 
  xy_goal_tolerance: 0.1            # 0.1 is default
  latch_xy_goal_tolerance: true     # false  -- If goal tolerance is latched, if the robot ever reaches the goal xy location it will simply rotate in place, even if it ends up outside the goal tolerance while it is doing so.
  
# ---- Foward simulation parameters
# We'll configure how long and with what granularity we'll forward simulate trajectories  
  sim_time: 1.0                     # 1.0 -- setting it higher can result in slightly smoother trajectories
  sim_granularity: 0.04             # 0.025 -- The step size, in meters, to take between points on a given trajectory 
  angular_sim_granularity: 0.04     # 0.025 -- The step size, in radians, to take between angular samples on a given trajectory
  vx_samples: 4                     # 3 -- The number of samples to use when exploring the x velocity space 
  vtheta_samples: 20                # 20 -- The number of samples to use when exploring the theta velocity space 
  controller_frequency: 20          # 20 -- The frequency at which this controller will be called in Hz. SEE DOCUMENTATION

# ---- Parameters for scoring trajectories
  meter_scoring: true              # false -- Whether the gdist_scale and pdist_scale parameters should assume that goal_distance and path_distance are expressed in units of meters or cell
  pdist_scale: 2.0                  # 0.6 -- The weighting for how much the controller should stay close to the path it was given  
  gdist_scale: 0.85                 # 0.8 -- The weighting for how much the controller should attempt to reach its local goal, also controls speed 
  occdist_scale: 0.02               # 0.01 -- weighting how much controller should avoid obstacles
  heading_lookahead: 0.325          # 0.325
  heading_scoring: false            # false
  heading_scoring_timestep: 0.8     # 0.8 -- only with heading_scoring true
  dwa: false                         # true -- false if robot has low acceleration limits
  publish_cost_grid_pc: true        # false
  global_frame_id: odom             # odom

# --- Oscillation prevention parameters
  oscillation_reset_dist: 0.05      # 0.05 -- How far the robot must travel in meters before oscillation flags are reset 

  prune_plan: true                  # true

# --- recovery behaviours 
#recovery_behaviors: [{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}]
#, {name: rotate_recovery, type: rotate_recovery/RotateRecovery}

      #DEFAULT: [{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, {name: rotate_recovery, type: rotate_recovery/RotateRecovery}, {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}]
recovery_behaviors: [{name: conservative_reset, type: clear_costmap_recovery/ClearCostmapRecovery}, {name: rotate_recovery, type: rotate_recovery/RotateRecovery}, {name: aggressive_reset, type: clear_costmap_recovery/ClearCostmapRecovery}]

#conservative_reset_dist: 4.0

